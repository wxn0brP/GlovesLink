var l;if(typeof window>"u"){let{WebSocket:h}=await import("ws");l=h}else l=window.WebSocket;var u=l;var f=class{ws;ackIdCounter;ackCallbacks;handlers;opts;url;constructor(n,t={}){this.ackIdCounter=1,this.ackCallbacks=new Map,this.handlers={},this.opts={logs:!1,reConnect:!0,reConnectInterval:1e3,token:null,...t},this.url=new URL(n,window?window.location.href.replace("http","ws"):"ws://localhost"),this.opts.token&&this.url.searchParams.set("token",this.opts.token),this._connect()}_connect(){let n=Date.now().toString(36)+Math.random().toString(36).substring(2,10);this.url.searchParams.set("id",n),this.ws=new u(this.url.href),this.ws.onopen=()=>{this.opts.logs&&console.log("[ws] Connected"),this.handlers.connect?.(this.ws)},this.ws.onerror=(...t)=>{this.opts.logs&&console.warn("[ws] Error:",t),this.handlers.error?.(...t)},this.ws.onmessage=t=>{let e=t?.data?.toString()||t?.toString()||"",s;try{s=JSON.parse(e)}catch{this.opts.logs&&console.warn("[ws] Invalid JSON:",e);return}if("ack"in s){let r=s.ack,a=this.ackCallbacks.get(r);a&&(this.ackCallbacks.delete(r),a(...s.data));return}let{evt:i,data:o,ackI:c}=s;if(!i||o&&!Array.isArray(o))return;if(Array.isArray(c))for(let r=0;r<c.length;r++){let a=c[r];if(!o[a])break;let k=o[a];o[a]=(...p)=>{this.ws.send(JSON.stringify({ack:k,data:p}))}}let d=this.handlers[i];d&&d(...o)},this.ws.onclose=t=>{if(this.opts.logs&&console.log("[ws] Disconnected",t),this.handlers.disconnect?.(this.ws,t),t.code===1006){this.opts.logs&&console.log("[ws] Connection closed by server"),fetch("/gloves-link/status?id="+n).then(e=>e.json()).then(e=>{if(e.err){this.opts.logs&&console.log("[ws] Status error",e.msg);return}let s=e.status;this.opts.logs&&console.log("[ws] Status",s),s===401?this.handlers.unauthorized?.(this.ws):s===403?this.handlers.forbidden?.(this.ws):s===500&&this.handlers.serverError?.(this.ws)});return}this.opts.reConnect&&setTimeout(()=>{this._connect()},this.opts.reConnectInterval)}}on(n,t){this.handlers[n]=t}emit(n,...t){let e=t.map((s,i)=>{if(typeof s=="function")return i}).filter(s=>s!==void 0);for(let s=0;s<e.length;s++){let i=e[s],o=this.ackIdCounter++;this.ackCallbacks.set(o,t[i]),t[i]=o}this.ws.send(JSON.stringify({evt:n,data:t||void 0,ackI:e.length?e:void 0}))}send(n,...t){return this.emit(n,...t)}close(){this.ws.close()}};export{f as GLC,f as GlovesLinkClient,f as client,f as default};
//# sourceMappingURL=GlovesLinkClient.js.map
