{
  "version": 3,
  "sources": ["adapter/browser.js", "../src/client.ts"],
  "sourcesContent": ["export class GlovesLinkWS {\n    ws;\n    constructor(url) {\n        this.ws = new WebSocket(url);\n    }\n    onOpen(cb) { this.ws.addEventListener(\"open\", cb); }\n    onMessage(cb) { this.ws.addEventListener(\"message\", (e) => cb(e.data)); }\n    onClose(cb) { this.ws.addEventListener(\"close\", cb); }\n    onError(cb) { this.ws.addEventListener(\"error\", cb); }\n    send(data) { this.ws.send(data); }\n    close() { this.ws.close(); }\n    static fixUrl(url) {\n        if (url.startsWith(\"/\"))\n            url = window.location.host + url;\n        if (!url.startsWith(\"ws://\") && !url.startsWith(\"wss://\")) {\n            const protocol = window?.location?.protocol === \"https:\" ? \"wss://\" : \"ws://\";\n            url = protocol + url;\n        }\n        return url;\n    }\n}\n", "import { GlovesLinkWS } from \"#adapter\";\n\nexport interface GLC_Opts {\n    reConnect: boolean,\n    reConnectInterval: number,\n    logs: boolean;\n    token: string;\n}\n\nexport interface GLC_DataEvent {\n    evt: string;\n    data: any[];\n    ackI?: number[];\n}\n\nexport interface GLC_AckEvent {\n    ack: number;\n    data: any[];\n}\n\nexport class GlovesLinkClient {\n    public ws: GlovesLinkWS;\n    public ackIdCounter: number;\n    public ackCallbacks: Map<number, Function>;\n    public handlers: { [key: string]: Function };\n    public opts: GLC_Opts;\n    public url: string;\n\n    constructor(url: string, opts: Partial<GLC_Opts> = {}) {\n        this.ackIdCounter = 1;\n        this.ackCallbacks = new Map();\n        this.handlers = {};\n        this.opts = {\n            logs: false,\n            reConnect: true,\n            reConnectInterval: 1000,\n            token: null,\n            ...opts\n        }\n\n        this.url = GlovesLinkWS.fixUrl(url);\n        if (this.opts.token) this.url += `?token=${this.opts.token}`;\n\n        this._connect();\n    }\n\n    _connect() {\n        const id = Date.now().toString(36) + Math.random().toString(36).substring(2, 10);\n        const url = this.url.includes(\"?\") ? `${this.url}&id=${id}` : `${this.url}?id=${id}`;\n        this.ws = new GlovesLinkWS(url);\n\n        this.ws.onOpen(() => {\n            if (this.opts.logs) console.log(\"[ws] Connected\");\n            this.handlers.connect?.(this.ws);\n        });\n\n        this.ws.onError((...err: any) => {\n            if (this.opts.logs) console.warn(\"[ws] Error:\", err);\n            this.handlers.error?.(...err);\n        });\n\n        this.ws.onMessage((raw: string) => {\n            let msg: GLC_DataEvent | GLC_AckEvent;\n\n            try {\n                msg = JSON.parse(raw);\n            } catch {\n                if (this.opts.logs) console.warn(\"[ws] Invalid JSON:\", raw);\n                return;\n            }\n\n            if (\"ack\" in msg) {\n                const ackId = msg.ack;\n                const ackCallback = this.ackCallbacks.get(ackId);\n                if (ackCallback) {\n                    this.ackCallbacks.delete(ackId);\n                    ackCallback(...msg.data);\n                }\n                return;\n            }\n\n            const { evt, data, ackI } = msg;\n            if (!evt || (data && !Array.isArray(data))) return;\n\n            if (Array.isArray(ackI)) {\n                for (let i = 0; i < ackI.length; i++) {\n                    const ackIndex = ackI[i];\n                    if (!data[ackIndex]) break;\n\n                    const ackId = data[ackIndex];\n                    data[ackIndex] = (...res: any) => {\n                        this.ws.send(JSON.stringify({\n                            ack: ackId,\n                            data: res\n                        }));\n                    };\n                }\n            }\n\n            const handler = this.handlers[evt];\n            if (!handler) return;\n\n            handler(...data);\n        });\n\n        this.ws.onClose((event: CloseEvent) => {\n            if (this.opts.logs) console.log(\"[ws] Disconnected\", event);\n            this.handlers.disconnect?.(this.ws, event);\n\n            if (event.code === 1006) {\n                if (this.opts.logs) console.log(\"[ws] Connection closed by server\");\n                fetch(\"/gloves-link/status?id=\" + id).then(res => res.json()).then(data => {\n                    if (data.err) {\n                        if (this.opts.logs) console.log(\"[ws] Status error\", data.msg);\n                        return;\n                    }\n                    const status = data.status as number;\n                    if (this.opts.logs) console.log(\"[ws] Status\", status);\n                    if (status === 401) this.handlers.unauthorized?.(this.ws);\n                    else if (status === 403) this.handlers.forbidden?.(this.ws);\n                    else if (status === 500) this.handlers.serverError?.(this.ws);\n                })\n                return;\n            }\n            if (!this.opts.reConnect) return;\n\n            setTimeout(() => {\n                this._connect();\n            }, this.opts.reConnectInterval);\n        });\n    }\n\n    on(evt: string, handler: (...args: any[]) => void | any) {\n        this.handlers[evt] = handler;\n    }\n\n    emit(evt: string, ...args: any[]) {\n        const ackI = args.map((data, i) => {\n            if (typeof data === \"function\") return i;\n        }).filter(i => i !== undefined);\n\n        for (let i = 0; i < ackI.length; i++) {\n            const ackIndex = ackI[i];\n            const ackId = this.ackIdCounter++;\n            this.ackCallbacks.set(ackId, args[ackIndex]);\n            args[ackIndex] = ackId;\n        }\n\n        this.ws.send(JSON.stringify({\n            evt,\n            data: args || undefined,\n            ackI: ackI.length ? ackI : undefined\n        }));\n    }\n\n    send(evt: string, ...args: any[]) {\n        return this.emit(evt, ...args);\n    }\n\n    close() {\n        this.ws.close();\n    }\n}\n\nexport {\n    GlovesLinkClient as default,\n    GlovesLinkClient as GLC,\n    GlovesLinkClient as client,\n}"],
  "mappings": "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",
  "names": ["GlovesLinkWS", "url", "cb", "e", "data", "GlovesLinkClient", "url", "opts", "GlovesLinkWS", "id", "err", "raw", "msg", "ackId", "ackCallback", "evt", "data", "ackI", "i", "ackIndex", "res", "handler", "event", "status", "args"]
}
